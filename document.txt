:1) ===================
Output: 
	Undefined

Why?:
The reason is myvar declaration is hoisted to the top of the 
function, but the assignment isn't.  So the local variable is\ undefined.


Fixed:
var myvar = 'my value'; 

(function() { 
    var myvar = 'local value'; 
    console.log(myvar);
})();

:2) =============
output:
  Switch flag from false to true.

Why: 

 The local variable flag declaration is hoisted but it is not
 assigned.  Since it's defined and not initialzed, it's 
 undefined.

Fixed:
var flag = true; 

function test() {
    var flag = true;
    if(flag) {
        console.log('Switch flag from true to false');
    }
    else {
        flag = true;
        console.log('Switch flag from false to true');
    }
}
test();


:3)  =========================

output: 
	undefined

Why:
	The local variable message declaration is hoisted but 
	the assignment isn't.  So the variable is undefined 
	at console.log();


Fixed:

var message = 'Hello world'; 



function saySomething() {
    var message = 'Foo bar';
    console.log(message);
}
saySomething();

:4)  =========================

output: 
	Hello world

Why:
   message is a global variable.  When console.log() is called, 
   message is still initialized with: Hello World.

Fixed:
var message = 'Hello world'; 


function saySomething() {
    message = 'Foo bar';
    console.log(message);
}
saySomething();

:5)  =========================
output:
	undefined
	2

Why?:

The variable a is declared and hoisted but the assignment isn't hoisted
along with the declaration, so it's uninitialized when it is printed.
The function foo() is hoisted as well.  It is declared and defined up top through hoisting.

fixed:
function test() {

    var a = 1;
    function foo() {
        return 2;
    }

    console.log(a);
    console.log(foo());

}

test();

:6)  =========================

output:
   undefined
   aloha

Why?:
  bar is loged before it is assigned, but it is hoisted to the top
  even though it is declared after it's used.  foo() is hoisted too.

Fixed:

(function() {
    var bar = 1;
    var baz; 
    function foo() {
        console.log('aloha');
    }

    baz = 2;
    console.log(bar);
    foo();

})();

:7)  =========================

output:
   I can't run

Why?
	I am not sure why this is happening.   It seems that a function
	name is truthy. 

Fixed.

var run = false;

function fancy(arg1, arg2) {

    function run() {
        console.log('Will I run?');
    }

    if(run) {
        console.log('I can run');
    }
    else {
        console.log('I can\'t run');
    }

}

fancy();

:8)  =========================

output:
	I can't run

Why?
	The local variable run is declared but not assigned.  It is undefined at the time it is checked in the if statement.

Fixed:

var run = false;

function fancy(arg1, arg2) {
   var run = function() {
        console.log('Will I run?');
    }
    if(run) {
        console.log('I can run');
    }
    else {
        console.log('I can\'t run');
    }


}
fancy();
